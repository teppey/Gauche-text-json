これはRFC4627で定義されたJSON(Javascript Object Notation)を読み書きす
るモジュールです。


Gauche 0.9.1よりrfc.jsonモジュールが標準で添付されるため、通常この
モジュールを使う必要はありません。もしあなたがrfc.jsonで今のところ提供
されていない機能(マッピングのカスタマイズ・pretty print)を使いたいとい
う場合、このモジュールは有用かもしれません。


動作環境:

  Gauche 0.9.1 以降

インストール:

  From tarball

      $ gauche-package install [-S root] Gauche-text-json-0.2.tgz

  From source

      $ git clone git://github.com/teppey/Gauche-text-json.git
      $ cd Gauche-text-json
      $ ./DIST gen
      $ ./configure
      $ make
      $ make -s check
      $ [sudo] make install


Module API:

Module text.json
================


Constant: json-mime-type

  "application/json", that is the MIME type of JSON.


Function: json-read :optional input

  現在の入力ポートから読み込んだ文字列をJSONテキストとしてパーズし、結
  果を返します。省略可能な引数inputは入力ポートか文字列で、指定された
  場合それを入力としてパーズします。JSONのデータ型は、デフォルトでは以
  下のようにマッピングされます。後述するパラメータを使うことでオブジェ
  クトと配列のマッピングを変更することができます。

       JSON            戻り値
     ------------------------------
      オブジェクト     連想リスト
      配列             ベクタ
      数値             数値
      文字列           文字列
      true             #t
      false            #f
      null             シンボル null


Function: json-write obj :optional output

  objをJSON文字列として現在の出力ポートに書き出します。省略可能な引
  数outputには出力先を指定します。 outputが出力ポートであれば、結果は
  そのポートに書き出され、#fであれば結果は文字列として返されます。

  出力はobjのクラスによって以下のようにマッピングされます。デフォルト
  ではリストを連想リストと見なし、JSONオブジェクトとして出力しますが、この
  挙動は後述のlist-as-json-arrayパラメータに真の値を与えることにより、
  JSON配列として出力するよう変更されます。

      (class-of obj)                    JSON
    -------------------------------------------------
      <number>                          数値

      <string>                          文字列

      <boolean> and (eq? obj #t)        true
      <symbol>  and (eq? obj 'true)

      <boolean> and (eq? obj #f)        false
      <symbol>  and (eq? obj 'false)

      <symbol>  and (eq? obj 'null)     null

      <dictionary> or <list>            オブジェクト

      <sequence>                        配列


Function: json-write* obj :optional output

  json-writeと同様にobjをJSON文字列として書き出しますが、出力には見や
  すいよう改行およびインデントが補われます。インデントに使用される文字
  列はjson-indent-stringパラメータを使って変更することができます。


Parameter: json-indent-string

  json-write*関数はこのパラメータの値をインデントに使用します。この値
  は、文字・文字列・#fいずれかをこのパラメータに与えることで変更可能です。文字または文
  字列を指定した場合、それがインデントに使用されます。#fを指定した場
  合、インデントは行われません。



マッピングのカスタマイズ
------------------------

Parameter: json-object-fn :optional thunk

  thunkは引数を取らない手続きで、<dictionary>クラスを継承したクラスの
  インスタンスを返さねばなりません。パーサーはこのインスタンスに対し
  gauche.dictionaryモジュールのディクショナリインターフェースを用いて
  キーと値をセットします。


Parameter: json-array-fn :optional thunk

  thunkは引数を取らない手続きで、呼ばれると2つの値を返さねばなりません。
  1つ目の値は<sequence>クラスを継承したクラスオブジェクトで、2つ目の値
  は配列のサイズを表す非負の整数です。配列のサイズがあらかじめ決まって
  いない場合は、2つ目の値として#fを返します。パーサーは
  call-with-builderをこれらの値とともに呼び出し、コレクションを生成
  します。


以下のコードはJSONオブジェクトをハッシュテーブルに、JSON配列をリストに
してパーズするサンプルです。

  (parameterize ((json-object-fn (cut make-hash-table 'string=?))
                 (json-array-fn  (cut values <list> #f)))
    (let1 ht (json-read "{\"foo\": 1, \"bar\": [2, 3]}")
      (hash-table-get ht "foo")  ; => 1
      (hash-table-get ht "bar")  ; => (2 3)
     ))


Parameter: list-as-json-array :optional bool

  このパラメータはSchemeオブジェクトをJSON文字列として書き出す場合に使
  用します。通常json-writeおよびjson-write*は、リストを連想リストと見
  なし、JSONオブジェクトとして出力します。このパラメータに真の値を与え
  ると、リストはJSONの配列として書き出されるように変更されます。


  (parameterize ((list-as-json-array #t))
    (json-write '(1 2 "hello"))  ; => [1,2,"hello"]
    )



参考資料
--------

JavaScript Object Notation (JSON)
<http://www.ietf.org/rfc/rfc4627>

rfc.json - JSONのパーズと構築
http://practical-scheme.net/gauche/man/?l=jp&p=rfc.json
