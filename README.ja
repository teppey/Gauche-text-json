これはRFC4627で定義されたJSON(Javascript Object Notation)を読み書きす
るモジュールです。


動作環境:

  Gauche 0.9.1 以降

インストール:

  From tarball

      $ gauche-package install [-S root] Gauche-text-json-0.2.tgz

  From source

      $ git clone git://github.com/teppey/Gauche-text-json.git
      $ cd Gauche-text-json
      $ ./DIST gen
      $ ./configure
      $ make
      $ make -s check
      $ [sudo] make install


Module API:

Module text.json
================

このモジュールはRFC4627[1]で定義されたJSON(Javascript Object Notation)
を扱う手続きを提供します。

Gauche 0.9.1よりrfc.json[2]モジュールが標準で添付されるため、通常この
モジュールを使う必要はありません。もしrfc.jsonで今のところ提供されてい
ない機能(マッピングのカスタマイズ・出力のpretty print)が使いたいという
ような場合、このモジュールは有用かもしれません。

[1] http://www.ietf.org/rfc/rfc4627
[2] http://practical-scheme.net/gauche/man/?l=jp&p=rfc.json


Constant: json-mime-type

  "application/json", that is the MIME type of JSON.


Function: json-read :optional input

  現在の入力ポートから読み込んだ文字列をJSONテキストとしてパーズし、結
  果を返します。省略可能な引数inputは入力ポートか文字列で、指定された
  場合それを入力としてパーズします。JSONのデータ型は、デフォルトでは以
  下のようにマッピングされます。後述するパラメータを使うことでオブジェ
  クトと配列のマッピングを変更することができます。

           JSON    |    戻り値
     --------------+---------------
      オブジェクト |   連想リスト
      配列         |   ベクタ
      数値         |   数値
      文字列       |   文字列
      true         |   #t
      false        |   #f
      null         |   シンボルnull

Function: json-write obj :optional output

  objをJSON文字列として現在の出力ポートに書き出します。省略可能な引
  数outputには出力先を指定します。 outputが出力ポートであれば、結果は
  そのポートに書き出され、#fであれば結果は文字列として返されます。

  出力はobjのクラスによって以下のようにマッピングされます。デフォルト
  ではリストを連想リストとみなし、オブジェクトとして出力しますが、この
  挙動は後述のlist-as-json-arrayパラメータに真の値を与えることにより、
  配列として出力するように変更されます。

      (class-of obj)                    JSON
    =================================================
      <dictionary> or <list>            オブジェクト
    -------------------------------------------------
      <sequence>                        配列
    -------------------------------------------------
      <number>                          数値
    -------------------------------------------------
      <string>                          文字列
    -------------------------------------------------
      <boolean> and (eq? obj #t)        true
      <symbol>  and (eq? obj 'true)
    -------------------------------------------------
      <boolean> and (eq? obj #f)        false
      <symbol>  and (eq? obj 'false)
    -------------------------------------------------
      <symbol>  and (eq? obj 'null)     null


Function: json-write* obj :optional output

  json-writeと同様にobjをJSON文字列として書き出しますが、出力は見やす
  いようにインデントされます。インデント幅はjson-indent-widthパラメー
  タを使って変更することができます。


Parameter: json-indent-width

  json-write*で出力されるJSONテキストのインデント幅を保持するパラメー
  タです。


マッピングのカスタマイズ
------------------------

Parameter: json-object-fn :optional thunk

  thunkは引数を取らない手続きで、<dictionary>のサブクラスのインスタン
  スを返さねばなりません。パーサーはこのインスタンスに対して
  <dictionary>クラスのインターフェースを使用して値を追加します。


Parameter: json-array-fn :optional thunk

  thunkは引数を取らない手続きで、呼ばれると2つの値を返さねばなりません。
  1つ目の値は<sequence>クラスを継承したクラスオブジェクトで、2つ目の値
  は非負の整数か#fです。パーサーはこれらの値をcall-with-builderに渡し、
  コレクションを作成します。


Parameter: list-as-json-array :optional bool

  
