This is text.json, read/write JSON; defined RFC4627 ``Javascript Object
Notation''.

Requirements:

    Gauche 0.9 or later

Install:

    From tarball

        $ gauche-package install [-S root] Gauche-text-json-0.1.tgz

    From source

        $ git clone git://github.com/teppey/Gauche-text-json.git
        $ cd Gauche-text-json
        $ ./DIST gen
        $ ./configure
        $ make
        $ make -s check
        $ [sudo] make install


Module API:

Module text.json
================

This module offers the procedure that treats JSON(Javascript Object
Notation) defined by RFC4627.

[RFC4627] http://www.ietf.org/rfc/rfc4627

Constant: json-mime-type

    "application/json", that is the MIME type of JSON.


Function: json-read &optional input

    This function takes input from current input port is assumed to be JSON
    and the parse and the result are returned. Argument `input' that can be
    omitted assumes it to be an input and does parse when specified by the
    input port or string. As for the data type of JSON, the mapping is done
    as follows:

             JSON    |    return value
        -------------+--------------
            object   |   assoc list
            array    |   vector
            number   |   number
            string   |   string
            false    |   false (symbol)
            true     |   true (symbol)
            null     |   null (symbol)


Function: json-write obj &optional output

    Argument `obj' is written to a current output port as JSON. As for
    argument `output' that can be omitted, if it is output port or symbol
    `string', and an output port, the result is written to the port, and
    when it is symbol `string', the string is returned as a return value of
    this function. As for argument `obj', the mapping is done in the
    opposite direction to json-read. That is:

             obj      |    output(JSON)
        --------------+-----------------
          assoc list  |    object
          vector      |    array
          number      |    number
          string      |    string
          false       |    false
          true        |    true
          null        |    null

